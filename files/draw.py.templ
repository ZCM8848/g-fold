# used to test the generated module
import gfold
from gfold import Vector, Problem
import matplotlib.pyplot as plt
import numpy as np

up = {{up}} # which axis is considered up(cant be changed after code generation)
num = {{num}} # number of simulation steps(dont change)

m_thrust = 24000
sc = gfold.Spacecraft() # create a spacecraft object and define parameters
sc.mass = 2000
sc.fuel = 300
sc.a = 5e-4
sc.min_thrust = m_thrust * 0.2
sc.max_thrust = m_thrust * 0.8
sc.max_angle = 180
sc.max_vel = 90
sc.glide_slope_angle = 0
pos = Vector() # no constructor yet
pos.x = 2400
pos.y = 450
pos.z = -330
vel = Vector()
vel.x = -10
vel.y = -40
vel.z = 10
velf = Vector()
sc.initial_position = pos
sc.initial_velocity = vel
sc.target_velocity = velf
s = gfold.Settings()
gravity = Vector()
print(gravity.x, gravity.y, gravity.z)
gravity.x = -3.71
s.gravity = gravity
s.maxit = 30 # iterations for ecos
p = Problem(s, sc)
res = p.solve(35, 55)

mass = np.exp(res.z) # z = ln(mass) thus mass  = e^z
thrust = np.multiply(mass, res.s)/m_thrust*100 # calculate the % of thrust used in each timestep
time = np.arange(0, res.t, res.t/num)

# plot the results
fig = plt.figure()

ax = fig.add_subplot(411)
ax.set_ylim(0, 100)
ax.plot(time, thrust, label="thrust")
ax.legend()

ax = fig.add_subplot(412)
ax.plot(np.array(res.x)[:, 1], np.array(res.x)[:, 2], label="surface trajectory")
ax.legend()

ax = fig.add_subplot(413)
ax.plot(time, np.degrees(np.arccos(np.divide(np.array(res.u)[:, 0], res.s))), label="attitude")
ax.legend()

ax = fig.add_subplot(414)
ax.plot(time, np.array(res.x)[:, 0], label="height")
ax.legend()
if res.status == 0: # 0 == success
    print("success")
    print("minimum fuel required: ", sc.mass-mass[num-1])
    plt.show()